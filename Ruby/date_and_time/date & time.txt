--------------------------------------------------------------- class Time ---------------------------------------------------------------

 -> The Time class represents dates and times in Ruby. 
 -> It is a thin layer over the system date and time functionality provided by the operating system. 
 -> This class may be unable on your system to represent dates before 1970 or after 2038.
 
 -> A Time object represents a date and time :-
 	syntax :- Time.new(YYYY,MM,DD,HH,MM,SS)
 	
 	eg :-
 		3.2.1 :002 > Time.new(2000,1,1,0,0,0)
 		 => 2000-01-01 00:00:00 +0530              # +0530 is GMT.s
 		 
 1). Accessing each element in time :-
 	
 	eg:-
 		3.2.1 :003 > t = Time.new(2000,1,1,0,0,0)
		 => 2000-01-01 00:00:00 +0530 
		 
		3.2.1 :004 > t.year
		 => 2000 
		3.2.1 :005 > t.month
		 => 1 
		3.2.1 :006 > t.mday
		 => 1 
		3.2.1 :007 > t.hour
		 => 0 
		3.2.1 :008 > t.min
		 => 0 
		3.2.1 :009 > t.sec
		 => 0 
		3.2.1 :010 > t.subsec
 		 => 0 
 		 
 2). Epoch Seconds :-
 
	-> Epoch seconds is the exact number of seconds (including fractional subseconds) since the Unix Epoch, January 1, 1970.
	-> You can retrieve that value exactly using method Time.to_r:

	eg:-
		3.2.1 :011 > Time.at(0).to_r
		 => (0/1) 
		3.2.1 :012 > Time.at(0.999999).to_r
		 => (9007190247541737/9007199254740992) 
		
	-> Other retrieval methods such as Time#to_i and Time#to_f may return a value that rounds or truncates subseconds.
	
	eg:-
		3.2.1 :013 > Time.at(0.999999).to_f
		 => 0.999999 
		3.2.1 :014 > Time.at(0.999999).to_i
		 => 0 
		 
 3). Time Resolution :-
 
 -> A Time object derived from the system clock (for example, by method Time.now) has the resolution supported by the system.
 	eg:-
 		3.2.1 :015 > Time.now
		 => 2023-03-06 13:19:47.633533513 +0530 
		 
	a). Creating a New Time Instance :-
	
	-> You can create a new instance of Time with Time.new. 
	-> This will use the current system time. 
	-> Time.now is an alias for this. 
	-> You can also pass parts of the time to Time.new such as year, month, minute, etc. 
	-> When you want to construct a time this way you must pass at least a year. 
	-> If you pass the year with nothing else time will default to January 1 of that year at 00:00:00 with the current system timezone.
	
		eg:-
		3.2.1 :016 > Time.new(2002)      	#only year is provided
		 => 2002-01-01 00:00:00 +0530 	
		3.2.1 :017 > Time.new(2002,10)	#year and month
		 => 2002-10-01 00:00:00 +0530 
		3.2.1 :018 > Time.new(2002,10,31)	#year,month and date
		 => 2002-10-31 00:00:00 +0530 

		3.2.1 :021 > Time.new(2002,10,31,2,2,2, "+02:00")     #You can pass a UTC offset
		 => 2002-10-31 02:02:02 +0200 
		 
	b). Working with an Instance of Time :-
	
	-> Once you have an instance of Time there is a multitude of things you can do with it. 
	
		eg:-
		3.2.1 :023 > t = Time.new(1995,05,25,15,5,5, "+05:00")
		=> 1995-05-25 15:05:05 +0500 
		
		*). Was that a monday?
		        eg:-
			3.2.1 :024 > t.monday?
			 => false 
		
		*). What year was that again?
			eg:-
			3.2.1 :025 > t.year
			 => 1995 
		
		*). Was it daylight savings at the time?
			eg:-
			3.2.1 :026 > t.dst?
			 => false 
		
		*). Whatâ€™s the day a year later?
			eg:-
			3.2.1 :027 > t + (60*60*24*365)
			 => 1996-05-24 15:05:05 +0500 
		
		*). How many seconds was that since the Unix Epoch?
			eg:-
			3.2.1 :028 > t.to_i
			 => 801396305 
		
		*). You can also do standard functions like compare two times.
			eg:-
			3.2.1 :029 > t1 = Time.new(2010)
			 => 2010-01-01 00:00:00 +0530 
			3.2.1 :030 > t2 = Time.new(2011)
			 => 2011-01-01 00:00:00 +0530 
			3.2.1 :031 > t1 == t2
			 => false 
			3.2.1 :032 > t1 == t1
			 => true 
			3.2.1 :033 > t1 < t2
			 => true 
			3.2.1 :034 > t1 > t2
			 => false 
			3.2.1 :035 > Time.new(2010,10,31).between?(t1,t2)
			 => true 

			



