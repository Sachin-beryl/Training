------------------------------------------------------------ date and time irb -----------------------------------------------------------

 1). Methods for Creating :-
 
	a). ::new: Returns a new time from specified arguments (year, month, etc.), including an optional timezone value.
	
		eg:-
		3.2.1 :038 > Time.new(2023,05,21,11,45,46, "+07:30")
		 => 2023-05-21 11:45:46 +0730 
		
	b). ::local (aliased as ::mktime): Same as ::new, except the timezone is the local timezone.
	
		eg:-
		3.2.1 :039 > Time.local(2023,05,21,11,45,46)
		 => 2023-05-21 11:45:46 +0530 
		
	c). ::utc (aliased as ::gm): Same as ::new, except the timezone is UTC.
	
		eg:-
		3.2.1 :040 > Time.utc(2023,05,21,11,45,46)
		 => 2023-05-21 11:45:46 UTC 
		
	d). ::at: Returns a new time based on seconds since epoch.
	
		eg:-
		3.2.1 :041 > Time.at(2347846313)
		 => 2044-05-26 09:01:53 +0530 
		
	e). ::now: Returns a new time based on the current system time.
	
		eg:-
		3.2.1 :042 > Time.now
		 => 2023-03-06 14:55:42.951494274 +0530 
		
	f). + (plus): Returns a new time increased by the given number of seconds.
	
		eg:-
		3.2.1 :043 > t = Time.now
		 => 2023-03-06 14:56:00.018289599 +0530 
		3.2.1 :044 > t+10
		 => 2023-03-06 14:56:10.018289599 +0530 
		
	g). - (minus): Returns a new time decreased by the given number of seconds.
	
		eg:-
		3.2.1 :045 > t-20
		 => 2023-03-06 14:55:40.018289599 +0530 
		 
 2). Methods for Fetching :-

	a). usec (aliased as tv_usec): Returns the number of microseconds in the subseconds value of the time.
		
		eg:-
		3.2.1 :046 > t
		 => 2023-03-06 14:56:00.018289599 +0530 
		3.2.1 :047 > t.usec
		 => 18289 
		
	b). nsec (aliased as tv_nsec): Returns the number of nanoseconds in the subsecond part of the time.
	
		eg:-
		3.2.1 :048 > t.nsec
		 => 18289599 

	c). subsec: Returns the subseconds value for the time.
	
		eg:-
		3.2.1 :049 > t.subsec
		 => (18289599/1000000000) 
		
	d). wday: Returns the integer weekday value of the time (0 == Sunday).
	
		eg:-
		3.2.1 :050 > t.wday
		 => 1 
		
	e). yday: Returns the integer yearday value of the time (1 == January 1).
	
		eg:-
		3.2.1 :051 > t.yday
		 => 65 
		
	f). hash: Returns the integer hash value for the time.
	
		eg:-
		3.2.1 :052 > t.hash
		 => 1279555496784931508 
		
	g). utc_offset (aliased as gmt_offset and gmtoff): Returns the offset in seconds between time and UTC.
	
		eg:-
		3.2.1 :053 > t.utc_offset
		 => 19800 
		
	h). to_f: Returns the float number of seconds since epoch for the time.
	
		eg:-
		3.2.1 :054 > t.to_f
		 => 1678094760.0182896 
		
	i). to_i (aliased as tv_sec): Returns the integer number of seconds since epoch for the time.
	
		eg:-
		3.2.1 :055 > t.to_i
		 => 1678094760 

	j). to_r: Returns the Rational number of seconds since epoch for the time.
	
		eg:-
		3.2.1 :056 > t.to_r
		 => (1678094760018289599/1000000000) 
		
	k). zone: Returns a string representation of the timezone of the time.
	
		eg:-
		3.2.1 :057 > t.zone
		 => "IST" 

 3). Methods for Querying:-
 
	a). utc? (aliased as gmt?): Returns whether the time is UTC.
	
		eg:-
		3.2.1 :065 > t.utc?
		 => false 

	b). dst? (aliased as isdst): Returns whether the time is DST (daylight saving time).
	
		eg:-
		3.2.1 :066 > t.dst?
		 => false 

	c). sunday?: Returns whether the time is a Sunday.
	
		eg:-
		3.2.1 :067 > t.sunday?
		 => false 

	NOTE :- monday?,tuesday?,wednesday?,thursday?,friday? ,saturday? are similar to sunday?
	
 4). Methods for Comparing:-
 
	a). <=>: Compares self to another time.
	
		eg:-
		3.2.1 :068 > t1
		 => 2010-01-01 00:00:00 +0530 
		3.2.1 :069 > t2
		 => 2011-01-01 00:00:00 +0530 
		3.2.1 :070 > t1 <=> t2 
		 => -1 
		
	b). eql?: Returns whether the time is equal to another time.
	
		eg:-
		3.2.1 :071 > t1.eql?(t2)
		 => false 

 5). Methods for Rounding:-
 
	a). round:Returns a new time with subseconds rounded.
	
		eg:-
		3.2.1 :072 > t = Time.now
		 => 2023-03-06 15:55:16.655981428 +0530 
		3.2.1 :073 > t.round(0)
		 => 2023-03-06 15:55:17 +0530 
		3.2.1 :074 > t.round(1)
		 => 2023-03-06 15:55:16.7 +0530 

	b). ceil: Returns a new time with subseconds raised to a ceiling.
	
		eg:-
		3.2.1 :075 > t.floor(0)
		 => 2023-03-06 15:55:16 +0530 
		3.2.1 :076 > t.floor(1)
		 => 2023-03-06 15:55:16.6 +0530 
		
	c). floor: Returns a new time with subseconds lowered to a floor.
	
		eg:-
		3.2.1 :077 > t.ceil(0)
		 => 2023-03-06 15:55:17 +0530 
		3.2.1 :078 > t.ceil(1)
		 => 2023-03-06 15:55:16.7 +0530 
		 
	NOTE :- 0 and 1 specify the number of digit after decimal.
	
		eg:-
		3.2.1 :080 > t.ceil(5)
 		=> 2023-03-06 15:55:16.65599 +0530 
