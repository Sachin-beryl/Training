------------------------------------------------------------INTRODUCTION-----------------------------------------------------------------

 1). Ruby is a scripting language designed by Yukihiro Matsumoto, also known as Matz.
 2). It runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX.
 3). Ruby is a pure object-oriented programming language.
 4). Ruby is a general-purpose, interpreted programming language.
 5). Ruby is a server-side scripting language similar to Python and PERL.
 6). Ruby can be used to write Common Gateway Interface (CGI) scripts.
 CGI -> a simple protocol for passing an HTTP request from a web server to a standalone program, and returning the output to the web browser
 
 7). Ruby can be embedded into Hypertext Markup Language (HTML).

------------------------------------------------------------Ruby Installation------------------------------------------------------------

 1). Update the system repositories with:
	sudo apt update

 2). Use the following command to install Ruby:
	sudo apt install ruby-full
	
 3). Type 'y' in terminal to give permission to download and install ruby.
 
                                    ----------IF ALREADY PRESENT UPDATE THE VERSION OF RUBY----------
                      
                a). check version on rvm(ruby version manager) in terminal.
                	rvm -v
                	
                b). list the version of ruby using rvm.
                	rvm list known
                	
                c). Now install the latest version of ruby.
                	rvm install 3.2.1(version number)
                	
                d). check for ruby version.
                	ruby -v
                	

------------------------------------------------------------PLATFORMS TO RUN RUBY--------------------------------------------------------

 1). VIM (Vi IMproved) is a very simple text editor.
 
 2). Interactive Ruby (IRb) :- 
 	a). Interactive Ruby (IRb) provides a shell for experimentation. Within the IRb shell, you can immediately view expression results, line by line.
 	b). Just type irb at your command prompt and an Interactive Ruby Session will start.
 		
 		eg:- beryl@beryl-HP-Pavilion-Notebook:~$ irb
			3.2.1 :001 > puts "sachin"
			sachin
			 => nil                                      
			3.2.1 :003 >   out = "Hello"
			3.2.1 :004 >   puts out
			3.2.1 :005 > end
			 => :hello 
	
	c). Exit the ruby terminal type "quit".
	
 3). VScode :- install vscode , install extensions in vscode related to ruby.
 
------------------------------------------------------------Ruby Syntax-----------------------------------------------------------------

 1). All ruby files will have extension .rb
 
 2). To print the output in ruby :-
 
 	a. puts "Hello, Ruby!";        # it will provide new line by default.
 	b. print "Hello, Ruby!";       # semicolon is not mendatory.
 	
 3). Whitespace in Ruby Program :-
 	-> Whitespace characters such as spaces and tabs are generally ignored in Ruby code, except when they appear in strings.
 	
 	eg :-   a + b is interpreted as a+b ( Here a is a local variable)
		a  +b is interpreted as a(+b) ( Here a is a method call)
		
 4). Ruby Identifiers :-
       -> Identifiers are names of variables, constants, and methods. Ruby identifiers are case sensitive. 
       -> It means Ram and RAM are two different identifiers in Ruby.
       
 5). Reserved Words :-
       -> The following list shows the reserved words in Ruby. These reserved words may not be used as constant or variable names. 
       -> They can, however, be used as method names.

	BEGIN		do	next	then
	END		else	nil	true
	alias		elsif	not	undef
	and		end	or	unless
	begin		ensure	redo	until
	break		false	rescue	when
	case		for	retry	while
	class		if	return	while
	def		in	self	__FILE__
	defined?	module	super	__LINE__
       
 6). Here Document in Ruby :-
 
	-> "Here Document" refers to build strings from multiple lines. 
	-> Following a << you can specify a string or an identifier to terminate the string literal, and all lines following the current line up to the terminator are the value of the string.

	-> If the terminator is quoted, the type of quotes determines the type of the line-oriented string literal. 
	-> Notice there must be no space between << and the terminator.
       
        eg :- a). print <<EOF
		   This is the first way of creating
		   here document ie. multiple line string.
		  EOF

	      b). print <<"EOF";                # same as above
		   This is the second way of creating
		   here document ie. multiple line string.
		  EOF

	      c). print <<`EOC`                 # execute commands
			echo hi there
			echo lo there
		  EOC

	      d). print <<"foo", <<"bar"  # you can stack them
			I said foo.
		  foo
			I said bar.
		  bar
		  
 7). Ruby BEGIN Statement :- Declares code to be called before the program is run.
	
	Syntax :- 
		BEGIN {
	   	   code
		}
	
	eg :- 
	code :-   puts "main code"
		  BEGIN{
		     puts "priority code"
		  }

	output :- priority code
		  main code

 8). Ruby END Statement :-
	Syntax :- 
		END {
		   code
		}
		
	eg :- 
	 code :- puts "main code"
		END{
		    puts "Always run at the end of code"
		}
		BEGIN{
		    puts "priority code"
		}
		
	output :- priority code
		  main code
		  Always run at the end of code
		  
 9). Ruby Comments :-
	-> A comment hides a line, part of a line, or several lines from the Ruby interpreter. 
	-> You can use the hash character (#) at the beginning of a line 

		eg :- # I am a comment. Just ignore me.
		
		   :- =begin
		      This is a comment.
		      This is a comment, too.
		      This is a comment, too.
		      I said that already.
		      =end
		
--------------------------------------------------------Classes and Objects--------------------------------------------------------------

 -> features of the object-oriented programming language include −

	Data Encapsulation
	Data Abstraction
	Polymorphism
	Inheritance
	
 -> An object-oriented program involves classes and objects. 
 -> A class is the blueprint from which individual objects are created.
 
 1). Defining a Class in Ruby :-
 	-> A class in Ruby always starts with the keyword class followed by the name of the class. 
 	-> The name should always be in initial capitals.

	syntax :- class Customer
		  end
	        	    
 2). Creating Objects in Ruby using new Method :-
 	
 	-> Objects are instances of the class.
 	-> The new method belongs to the class methods.
 	
 	eg :- cust1 = Customer. new
	      cust2 = Customer. new

 3). Member Functions in Ruby Class :-
 
 	-> functions are called methods. 
 	-> Each method in a class starts with the keyword def followed by the method name.
	-> The method name always preferred in lowercase letters. 
	-> End a method in Ruby by using the keyword end.
	
	eg:- class Sample
		  def hello
		     puts "Hello Ruby!"
		  end
	     end
 
 	     # Now using above class to create objects
	     object = Sample. new
	     object.hello
	     
 4). Ruby Constants :-
	-> Constants begin with an uppercase letter. 
	-> Constants defined within a class or module can be accessed from within that class or module. 
	-> And those defined outside a class or module can be accessed globally.
	
		eg :- VAR1 = 100
 NOTE:-	   :- puts "Value of first Constant is #{VAR1}"

-------------------------------------------------------------VARIABLES-------------------------------------------------------------------

 1). Local Variables    -> Local variables begin with a lowercase letter or _.

 2). Instance Variables −> Instance variables are available across methods for any particular instance or object. 
			-> Instance variables are preceded by the at sign (@) followed by the variable name.
			    
			    	eg:- @cust_id = id
	NOTE:-		    	  :- puts "Customer id #@cust_id"    

 3). Class Variables    −> Class variables are available across different objects.
			-> They are preceded by the sign @@ and are followed by the variable name.
			    
			    	eg:- class Customer
   				        @@no_of_customers = 0
				     end

 4). Global Variables   −> Class variables are not available across classes. 
        	       -> If you want to have a single variable, which is available across classes, 
        	       -> you need to define a global variable. 
        	       -> The global variables are always preceded by the dollar sign ($).
        	    
	        	    	eg :- $global_variable = 10

 5). Ruby Pseudo-Variables :-
  
  -> They are special variables that have the appearance of local variables but behave like constants.
  -> You cannot assign any value to these variables.

	a). self     − The receiver object of the current method.
	b). true     − Value representing true.
	c). false    − Value representing false.
	d). nil      − Value representing undefined.
	e). __FILE__ − The name of the current source file.
	f). __LINE__ − The current line number in the source file.
	
 6). Ruby Basic Literals :-
 
 	a). Integer Numbers  :- range from -2^30 to (2^30)-1 or -2^62 to (2^62)-1.
 	b). Floating Numbers :- Ruby supports floating numbers. They are also numbers but with decimals.
 	c). String Literals  :- Ruby strings are simply sequences of 8-bit bytes and they are objects of class String. 
 			      :- Double-quoted strings allow substitution and backslash notation 
 			      :- but single-quoted strings don't allow substitution and allow backslash notation only for \\ and \'
 			      
 		eg :-   puts 'escape using "\\"';
			puts 'That\'s right';
			
			output :-
				escape using "\"
				That's right
			 	
 NOTE IMP :- You can substitute the value of any Ruby expression into a string using the sequence #{ expr }.
 
 7). Ruby Arrays :-
 
 -> Literals of Ruby Array are created by placing a comma-separated series of object references between the square brackets. 
 -> A trailing comma is ignored.

   eg :-
	ary = [  "fred", 10, 3.14, "This is a string", "last element", ]
	ary.each do |i|
	   puts i
	end

   output :-
	fred
	10
	3.14
	This is a string
	last element
	
 8). Ruby Hashes
  -> A literal Ruby Hash is created by placing a list of key/value pairs between braces, with either a comma or the sequence => between the key and the value. 
  -> A trailing comma is ignored.

	eg :- 
		hsh = colors = { "red" => 0xf00, "green" => 0x0f0, "blue" => 0x00f }
		hsh.each do |key, value|
		   print key, " is ", value, "\n"
		end

	output :-
		red is 3840
		green is 240
		blue is 15

 9). Ruby Ranges
  -> A range (1..5) means it includes 1, 2, 3, 4, 5 values 
  -> A range (1...5) means it includes 1, 2, 3, 4 values.
  
	eg:-
		(10..15).each do |n| 
		   print n, ' ' 
		end
		
	output :-
		10 11 12 13 14 15
		
----------------------------------------------------------Ruby - Operators--------------------------------------------------------------

 1). Arithmetic Operators :- +,-,/,%,*,**(power).
 
 2). Arithmetic Operators :- ==,!=,>,<,<=,>=,

	a). Combined comparison operator(<=>)
		-> Returns 0 if first operand equals second                 5<=>5    return 0
		-> 1 if first operand is greater than the second            5<=>2    return 1
		-> -1 if first operand is less than the second.             2<=>5    return -1
	
	b). ===  -> Used to test equality within a when clause of a case statement.	
			
		eg:- (1...10) === 5 returns true.

       c). (.eql?) -> True if the receiver and argument have both the same type and equal values.	
       
       	eg:- 1 == 1.0 returns true, but 1.eql?(1.0) is false.

       d). equal?  -> True if the receiver and argument have the same object id.	
       
       	eg:- if aObj is duplicate of bObj then aObj == bObj is true
       	     a.equal?bObj is false but a.equal?aObj is true.
		
 3). Assignment Operators :- =,+=,-=,*=,/=,%=,**=
 
 4). Parallel Assignment :-
 
 	eg :- 1. a, b, c = 10, 20, 30
 	      2. for swap -> a, b = b, c
 	      
 5). Bitwise Operators :- &,|,^,~,<<,>>
 
 6). Logical Operators :- and,or,&&,||,!,not
 
 7). Ternary Operator :- (?:)
 
 	syntax :-If Condition is true ? Then value X : Otherwise value Y
 	
 8). defined? Operators :-
  
 -> defined? is a special operator that takes the form of a method call to determine whether or not the passed expression is defined.
 
 	eg :- defined? variable      # True if variable is initialized
 	   :- defined? method_call   # True if a method is defined
 	   :- defined? super         # True if a method exists that can be called with super user
 	   :- defined? yield         # True if a code block has been passed

 9). Double Colon "::" Operators :-
 
  -> The :: is a unary operator that allows: constants, instance methods and class methods defined within a class or module, to be  	accessed from anywhere outside the class or module.
  
  -> You need to just prefix the :: Const_name with an expression that returns the appropriate class or module object.
  
  NOTE :- Remember in Ruby, classes and methods may be considered constants too.
  
  	eg :-
  		CONST = ' out there'
		class Inside_one
		   CONST = proc {' in there'}
		   def where_is_my_CONST
		      ::CONST + ' inside one'
		   end
		end
		class Inside_two
		   CONST = ' inside two'
		   def where_is_my_CONST
		      CONST
		   end
		end
		puts Inside_one.new.where_is_my_CONST
		puts Inside_two.new.where_is_my_CONST
		puts Object::CONST + Inside_two::CONST
		puts Inside_two::CONST + CONST
		puts Inside_one::CONST
		puts Inside_one::CONST.call + Inside_two::CONST











