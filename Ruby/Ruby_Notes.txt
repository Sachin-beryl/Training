------------------------------------------------------------INTRODUCTION-----------------------------------------------------------------

 1). Ruby is a scripting language designed by Yukihiro Matsumoto, also known as Matz.
 2). It runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX.
 3). Ruby is a pure object-oriented programming language.
 4). Ruby is a general-purpose, interpreted programming language.
 5). Ruby is a server-side scripting language similar to Python and PERL.
 6). Ruby can be used to write Common Gateway Interface (CGI) scripts.
 CGI -> a simple protocol for passing an HTTP request from a web server to a standalone program, and returning the output to the web browser
 
 7). Ruby can be embedded into Hypertext Markup Language (HTML).

------------------------------------------------------------Ruby Installation------------------------------------------------------------

 1). Update the system repositories with:
	sudo apt update

 2). Use the following command to install Ruby:
	sudo apt install ruby-full
	
 3). Type 'y' in terminal to give permission to download and install ruby.
 
 
 4). install rvm in linux :-
 
 	a). install GPG keys used to verify installation package:

key :- gpg --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
 
 	b). Install RVM stable with ruby (development version):

		-> \curl -sSL https://get.rvm.io | bash -s stable --ruby
		
 5). install ruby using rvm:-
 	-> rvm install 3.2.1
 	
 6). RVM Configuration :-
 	-> Defaults = RVM has a set of defaults recorded in the file.
 	
		$rvm_config_path/db
 	
 	-> Overriding Default Settings
		RVM also has a directory for user overrides located in $rvm_path/user/. In order to override RVM's default settings, 			place the appropriate key=value into the db file of that folder

		$rvm_path/user/db

 
                                    ----------IF ALREADY PRESENT UPDATE THE VERSION OF RUBY----------
                      
                a). check version on rvm(ruby version manager) in terminal.
                	rvm -v
                	
                b). list the version of ruby using rvm.
                	rvm list known
                	
                c). Now install the latest version of ruby.
                	rvm install 3.2.1(version number)
                	
                d). check for ruby version.
                	ruby -v
                	
                e). check ruby version present on system.
                	rvm list
                	
                f). switch between ruby versions.
                	rvm use (version_number_present_on_system)
                	
                g). set default version of ruby.
                	rvm 3.2.1 --default
                	

------------------------------------------------------------PLATFORMS TO RUN RUBY--------------------------------------------------------

 1). VIM (Vi IMproved) is a very simple text editor.
 
 2). Interactive Ruby (IRb) :- 
 	a). Interactive Ruby (IRb) provides a shell for experimentation. Within the IRb shell, you can immediately view expression results, line by line.
 	b). Just type irb at your command prompt and an Interactive Ruby Session will start.
 		
 		eg:- beryl@beryl-HP-Pavilion-Notebook:~$ irb
			3.2.1 :001 > puts "sachin"
			sachin
			 => nil                                      
			3.2.1 :003 >   out = "Hello"
			3.2.1 :004 >   puts out
			3.2.1 :005 > end
			 => :hello 
	
	c). Exit the ruby terminal type "quit".
	
 3). VScode :- install vscode , install extensions in vscode related to ruby.
 
------------------------------------------------------------Ruby Syntax-----------------------------------------------------------------

 1). All ruby files will have extension .rb
 
 2). To print the output in ruby :-
 
 	a. puts "Hello, Ruby!";        # it will provide new line by default.
 	b. print "Hello, Ruby!";       # semicolon is not mendatory.
 	
 3). Whitespace in Ruby Program :-
 	-> Whitespace characters such as spaces and tabs are generally ignored in Ruby code, except when they appear in strings.
 	
 	eg :-   a + b is interpreted as a+b ( Here a is a local variable)
		a  +b is interpreted as a(+b) ( Here a is a method call)
		
 4). Ruby Identifiers :-
       -> Identifiers are names of variables, constants, and methods. Ruby identifiers are case sensitive. 
       -> It means Ram and RAM are two different identifiers in Ruby.
       
 5). Reserved Words :-
       -> The following list shows the reserved words in Ruby. These reserved words may not be used as constant or variable names. 
       -> They can, however, be used as method names.

	BEGIN		do	next	then
	END		else	nil	true
	alias		elsif	not	undef
	and		end	or	unless
	begin		ensure	redo	until
	break		false	rescue	when
	case		for	retry	while
	class		if	return	while
	def		in	self	__FILE__
	defined?	module	super	__LINE__
       
 6). Here Document in Ruby :-
 
	-> "Here Document" refers to build strings from multiple lines. 
	-> Following a << you can specify a string or an identifier to terminate the string literal, and all lines following the current line up to the terminator are the value of the string.

	-> If the terminator is quoted, the type of quotes determines the type of the line-oriented string literal. 
	-> Notice there must be no space between << and the terminator.
       
        eg :- a). print <<EOF
		   This is the first way of creating
		   here document ie. multiple line string.
		  EOF

	      b). print <<"EOF";                # same as above
		   This is the second way of creating
		   here document ie. multiple line string.
		  EOF

	      c). print <<`EOC`                 # execute commands
			echo hi there
			echo lo there
		  EOC

	      d). print <<"foo", <<"bar"  # you can stack them
			I said foo.
		  foo
			I said bar.
		  bar
		  
 7). Ruby BEGIN Statement :- Declares code to be called before the program is run.
	
	Syntax :- 
		BEGIN {
	   	   code
		}
	
	eg :- 
	code :-   puts "main code"
		  BEGIN{
		     puts "priority code"
		  }

	output :- priority code
		  main code

 8). Ruby END Statement :-
	Syntax :- 
		END {
		   code
		}
		
	eg :- 
	 code :- puts "main code"
		END{
		    puts "Always run at the end of code"
		}
		BEGIN{
		    puts "priority code"
		}
		
	output :- priority code
		  main code
		  Always run at the end of code
		  
 9). Ruby Comments :-
	-> A comment hides a line, part of a line, or several lines from the Ruby interpreter. 
	-> You can use the hash character (#) at the beginning of a line 

		eg :- # I am a comment. Just ignore me.
		
		   :- =begin
		      This is a comment.
		      This is a comment, too.
		      This is a comment, too.
		      I said that already.
		      =end
		
--------------------------------------------------------Classes and Objects--------------------------------------------------------------

 -> features of the object-oriented programming language include −

	Data Encapsulation
	Data Abstraction
	Polymorphism
	Inheritance
	
 -> An object-oriented program involves classes and objects. 
 -> A class is the blueprint from which individual objects are created.
 
 1). Defining a Class in Ruby :-
 	-> A class in Ruby always starts with the keyword class followed by the name of the class. 
 	-> The name should always be in initial capitals.

	syntax :- class Customer
		  end
	        	    
 2). Creating Objects in Ruby using new Method :-
 	
 	-> Objects are instances of the class.
 	-> The new method belongs to the class methods.
 	
 	eg :- cust1 = Customer. new
	      cust2 = Customer. new

 3). Member Functions in Ruby Class :-
 
 	-> functions are called methods. 
 	-> Each method in a class starts with the keyword def followed by the method name.
	-> The method name always preferred in lowercase letters. 
	-> End a method in Ruby by using the keyword end.
	
	eg:- class Sample
		  def hello
		     puts "Hello Ruby!"
		  end
	     end
 
 	     # Now using above class to create objects
	     object = Sample. new
	     object.hello
	     
 4). Ruby Constants :-
	-> Constants begin with an uppercase letter. 
	-> Constants defined within a class or module can be accessed from within that class or module. 
	-> And those defined outside a class or module can be accessed globally.
	
		eg :- VAR1 = 100
 NOTE:-	   :- puts "Value of first Constant is #{VAR1}"

-------------------------------------------------------------VARIABLES-------------------------------------------------------------------

 1). Local Variables    -> Local variables begin with a lowercase letter or _.

 2). Instance Variables −> Instance variables are available across methods for any particular instance or object. 
			-> Instance variables are preceded by the at sign (@) followed by the variable name.
			    
			    	eg:- @cust_id = id
	NOTE:-		    	  :- puts "Customer id #@cust_id"    

 3). Class Variables    −> Class variables are available across different objects.
			-> They are preceded by the sign @@ and are followed by the variable name.
			    
			    	eg:- class Customer
   				        @@no_of_customers = 0
				     end

 4). Global Variables   −> Class variables are not available across classes. 
        	       -> If you want to have a single variable, which is available across classes, 
        	       -> you need to define a global variable. 
        	       -> The global variables are always preceded by the dollar sign ($).
        	    
	        	    	eg :- $global_variable = 10

 5). Ruby Pseudo-Variables :-
  
  -> They are special variables that have the appearance of local variables but behave like constants.
  -> You cannot assign any value to these variables.

	a). self     − The receiver object of the current method.
	b). true     − Value representing true.
	c). false    − Value representing false.
	d). nil      − Value representing undefined.
	e). __FILE__ − The name of the current source file.
	f). __LINE__ − The current line number in the source file.
	
 6). Ruby Basic Literals :-
 
 	a). Integer Numbers  :- range from -2^30 to (2^30)-1 or -2^62 to (2^62)-1.
 	b). Floating Numbers :- Ruby supports floating numbers. They are also numbers but with decimals.
 	c). String Literals  :- Ruby strings are simply sequences of 8-bit bytes and they are objects of class String. 
 			      :- Double-quoted strings allow substitution and backslash notation 
 			      :- but single-quoted strings don't allow substitution and allow backslash notation only for \\ and \'
 			      
 		eg :-   puts 'escape using "\\"';
			puts 'That\'s right';
			
			output :-
				escape using "\"
				That's right
			 	
 NOTE IMP :- You can substitute the value of any Ruby expression into a string using the sequence #{ expr }.
 
 7). Ruby Arrays :-
 
 -> Literals of Ruby Array are created by placing a comma-separated series of object references between the square brackets. 
 -> A trailing comma is ignored.

   eg :-
	ary = [  "fred", 10, 3.14, "This is a string", "last element", ]
	ary.each do |i|
	   puts i
	end

   output :-
	fred
	10
	3.14
	This is a string
	last element
	
 8). Ruby Hashes
  -> A literal Ruby Hash is created by placing a list of key/value pairs between braces, with either a comma or the sequence => between the key and the value. 
  -> A trailing comma is ignored.

	eg :- 
		hsh = colors = { "red" => 0xf00, "green" => 0x0f0, "blue" => 0x00f }
		hsh.each do |key, value|
		   print key, " is ", value, "\n"
		end

	output :-
		red is 3840
		green is 240
		blue is 15

 9). Ruby Ranges
  -> A range (1..5) means it includes 1, 2, 3, 4, 5 values 
  -> A range (1...5) means it includes 1, 2, 3, 4 values.
  
	eg:-
		(10..15).each do |n| 
		   print n, ' ' 
		end
		
	output :-
		10 11 12 13 14 15
		
----------------------------------------------------------Ruby - Operators--------------------------------------------------------------

 1). Arithmetic Operators :- +,-,/,%,*,**(power).
 
 2). Arithmetic Operators :- ==,!=,>,<,<=,>=,

	a). Combined comparison operator(<=>)
		-> Returns 0 if first operand equals second                 5<=>5    return 0
		-> 1 if first operand is greater than the second            5<=>2    return 1
		-> -1 if first operand is less than the second.             2<=>5    return -1
	
	b). ===  -> Used to test equality within a when clause of a case statement.	
			
		eg:- (1...10) === 5 returns true.

       c). (.eql?) -> True if the receiver and argument have both the same type and equal values.	
       
       	eg:- 1 == 1.0 returns true, but 1.eql?(1.0) is false.

       d). equal?  -> True if the receiver and argument have the same object id.	
       
       	eg:- if aObj is duplicate of bObj then aObj == bObj is true
       	     a.equal?bObj is false but a.equal?aObj is true.
		
 3). Assignment Operators :- =,+=,-=,*=,/=,%=,**=
 
 4). Parallel Assignment :-
 
 	eg :- 1. a, b, c = 10, 20, 30
 	      2. for swap -> a, b = b, c
 	      
 5). Bitwise Operators :- &,|,^,~,<<,>>
 
 6). Logical Operators :- and,or,&&,||,!,not
 
 7). Ternary Operator :- (?:)
 
 	syntax :-If Condition is true ? Then value X : Otherwise value Y
 	
 8). defined? Operators :-
  
 -> defined? is a special operator that takes the form of a method call to determine whether or not the passed expression is defined.
 
 	eg :- defined? variable      # True if variable is initialized
 	   :- defined? method_call   # True if a method is defined
 	   :- defined? super         # True if a method exists that can be called with super user
 	   :- defined? yield         # True if a code block has been passed

 9). Double Colon "::" Operators :-
 
  -> The :: is a unary operator that allows: constants, instance methods and class methods defined within a class or module, to be  	accessed from anywhere outside the class or module.
  
  -> You need to just prefix the :: Const_name with an expression that returns the appropriate class or module object.
  
  NOTE :- Remember in Ruby, classes and methods may be considered constants too.
  
  	eg :-
  		CONST = ' out there'
		class Inside_one
		   CONST = proc {' in there'}
		   def where_is_my_CONST
		      ::CONST + ' inside one'
		   end
		end
		class Inside_two
		   CONST = ' inside two'
		   def where_is_my_CONST
		      CONST
		   end
		end
		puts Inside_one.new.where_is_my_CONST
		puts Inside_two.new.where_is_my_CONST
		puts Object::CONST + Inside_two::CONST
		puts Inside_two::CONST + CONST
		puts Inside_one::CONST
		puts Inside_one::CONST.call + Inside_two::CONST

-----------------------------------------------------------------IF ELSE---------------------------------------------------------------

 1). if...else Statement
	Syntax :-
		if conditional [then]
		   code...
		[elsif conditional [then]
		   code...]...
		[else
		   code...]
		end

	eg :-
		number = 1
		if number > 2
		    puts "number is greater then two"
		elsif number <= 2 and number != 0
		    puts "The number is 1"
		else
		    puts "Invalid number"
		end

 2). if modifier
	Syntax :-
		code if condition       (Executes code if the conditional is true.)

	eg:-
		$debug = 1
		print "debug\n" if $debug
	
	output :-
		debug
		
 3). unless Statement
 	-> Executes code if conditional is false.
 
	Syntax :-
		unless conditional [then]
		   code
		[else
		   code ]
		end
		
	eg :-
		number = 1;
		unless number >= 2
		    puts "number equals to 1"
		else
		    puts "number is greater than 2"
		end
			
	output:-
		number equals to 1
		
 4). unless modifier
 	syntax :- 
 		code unless condition
 	eg :-
 		$var = false
		print "3 -- Value is set\n" unless $var
		
 5). case Statement
 	syntax :-
	 	case expr0
		when expr1, expr2
		   stmt1
		when expr3, expr4
		   stmt2
		else
		   stmt3
		end

	eg:-
		$age =  5
		case $age
		when 0 .. 2
		   puts "baby"
		when 3 .. 6
		   puts "little child"
		when 7 .. 12
		   puts "child"
		when 13 .. 18
		   puts "youth"
		else
		   puts "adult"
		end

	output :-
		little child

---------------------------------------------------------------Loops-------------------------------------------------------------------

 1). while Statement
	Syntax :-
		while conditional [do]
		   code
		end
		
	eg 1 :- 
		number = 1;
		while number < 5 do
		    puts ("something #{number}")
		    number += 1
		end
	
	eg 2 :- 3.2.1 :071 >	def sum
		3.2.1 :071 >   num = 1
		3.2.1 :072 >   a = 5
		3.2.1 :073 >   b = 10
		3.2.1 :074 >   while num < 6 do
		3.2.1 :075 >     puts ("sum of a and b is #{a+b}")
		3.2.1 :076 >     num += 1
		3.2.1 :077 >   end
		3.2.1 :078 > end
		 => :sum 
		 
	output :-
		3.2.1 :079 > sum
		sum of a and b is 15
		sum of a and b is 15                                                 
		sum of a and b is 15                                                 
		sum of a and b is 15                                                 
		sum of a and b is 15   
		
 2). while modifier
	Syntax :-
		code while condition

		OR

		begin 
		  code 
		end while conditional
		
	eg :-
		number = 1;
		begin 
		    puts "something #{number}"
		    number += 1
		end while number < 6

 3). until Statement
 	syntax :-
		until conditional [do]
		   code
		end
		
	eg :-
		number = 1
		until number > 5 do
		    puts "number is #{number}"
		    number += 1
		end
				
 4). until modifier
	Syntax :-
		code until conditional

		OR

		begin
		   code
		end until conditional
		
	eg :-
		number = 1
		begin
		    puts "number is #{number}"
		    number += 2
		end until number > 5

 5). for Statement
	Syntax :-
		for variable [, variable ...] in expression [do]
		   code
		end
	
	eg 1 :-
		number = 10
		for i in 1..5
		    print (number * i),"\n"
		end
		
	eg 2 :-
		3.2.1 :130 > def sub
		3.2.1 :131 >   num1 = 10
		3.2.1 :132 >   num2 = 20
		3.2.1 :133 >   for i in 1..5
		3.2.1 :134 >     num3 = num2 - num1
		3.2.1 :135 >     puts (num3)
		3.2.1 :136 >   end
		3.2.1 :137 > end
		 => :sub 
		 
	output :-
		3.2.1 :138 > sub
		10
		10                                      
		10                                      
		10                                      
		10                
		
	for each loop :- (0..5).each do |i|
			     puts "Value of local variable is #{i}"
		     	  end
		     	  
 6). break Statement
 	eg:-
 		for i in 0..5
		   if i > 2 then
		      break
		   end
		   puts "Value of local variable is #{i}"
		end
				     
 	output:-
 		Value of local variable is 0
		Value of local variable is 1
		Value of local variable is 2
		
 7). next Statement
 	eg:- 
 		for i in 0..5
		   if i < 2 then
		      next
		   end
		   puts "Value of local variable is #{i}"
		end

	output :-
		Value of local variable is 2
		Value of local variable is 3
		Value of local variable is 4
		Value of local variable is 5

 8). redo Statement 
 -> Restarts this iteration of the most internal loop, without checking loop condition.
 	eg:-
 		for i in 0..5
		   if i < 2 then
		      puts "Value of local variable is #{i}"
		      redo
		   end
		end
		
	output :-
		This will produce the following result and will go in an infinite loop −

		Value of local variable is 0
		Value of local variable is 0
		............................
				
 9). retry Statement
 -> If retry appears in rescue clause of begin expression, restart from the beginning of the begin body.

	syntax:-
		begin
		   do_something # exception raised
		rescue
		   # handles error
		   retry  # restart from beginning
		end

	   eg:-
		for i in 1..5
		   retry if some_condition # restart from i == 1
		end	
		
	     :- for i in 0..5
		   retry if i > 2
		puts "Value of local variable is #{i}"
		end
			
	output:-
		This will produce the following result and will go in an infinite loop −

		Value of local variable is 1
		Value of local variable is 2
		Value of local variable is 1
		Value of local variable is 2
		Value of local variable is 1
		Value of local variable is 2
		............................

-------------------------------------------------------------METHODS--------------------------------------------------------------------

 -> Ruby methods are very similar to functions in any other programming language. 
 -> Ruby methods are used to bundle one or more repeatable statements into a single unit.
 -> Method names should begin with a lowercase letter. 
 
 	syntax :-
	     1. def method_name 
		   expr..
		end

	     2. def method_name (var1, var2)
		   expr..
		end

	     3. def method_name (var1 = value1, var2 = value2)
		   expr..
		end

 1). return Statement :-
 
 -> The return statement in ruby is used to return one or more values from a Ruby Method.
 	syntax :-
		return [expr[`,' expr...]]

	eg :- 
		def return_method
		    a = 10
		    b = 15
		    c = 20

		    return a,b,c     #multiple return
		end

		ret = return_method  #saving method return into variable.
		puts ret	      # print the return using variable.
		
 2). Variable Number of Parameters :-
 -> Suppose you declare a method that takes two parameters. 
 -> whenever you call this method.
 -> you need to pass two parameters along with it.
 -> However, Ruby allows you to declare methods that work with a variable number of parameters.
 -> This means that this parameter can take in any number of variables.

	eg :-
		def sample(*a)
		    puts "The length of variable is #{a.length}"
		    for i in 0...a.length
			puts "The values are #{a[i]}"
		    end
		end

		sample(1,2,3)
		sample('ram','shiv')
		
	output :-
		The length of variable is 3
		The values are 1
		The values are 2
		The values are 3
		The length of variable is 2
		The values are ram
		The values are shiv

 3). Class Methods :- 
 -> When a method is defined outside of the class definition, the method is marked as private by default. 
 -> On the other hand, the methods defined in the class definition are marked as public by default. 
 -> The default visibility and the private mark of the methods can be changed by public or private of the Module.

 NOTE --->>>>Ruby gives you a way to access a method without instantiating a class.

	eg :- 
		class Sample
		    def test1
			puts "normal method"
		    end
		    def Sample.test2
			puts "class method"
		    end
		end

		Sample.test2     #call the method without making object of class.
		 	
	output :-
		class method
		
 4). alias Statement :-
 -> This gives alias to methods or global variables.       NOTE :- alias only for method and global variable.
 -> Aliases cannot be defined within the method body. 
 -> The alias of the method keeps the current definition of the method.
 -> Making aliases for the numbered global variables ($1, $2,...) is prohibited. 
 
	Syntax :-
		alias method-name method-name
		alias global-variable-name global-variable-name
	Example :-
		alias foo bar
		alias $MATCH $&
		Here we have defined foo alias for bar, and $MATCH is an alias for $&
		
 5). undef Statement :-
 -> This cancels the method definition. 
 -> An undef cannot appear in the method body.

	Syntax :-
		undef method-name

	eg :-
		undef bar   #To undefine a method called bar.
		
------------------------------------------------------------------------------------------------------------------------------------
								BLOCKS
								
 -> A block consists of chunks of code.
 -> You assign a name to a block.
 -> The code in the block is always enclosed within braces ({}).
 -> A block is always invoked from a function with the same name as that of the block. This means that if you have a block with the name test, then you use the function test to invoke this block.

 -> You invoke a block by using the yield statement.
 
 	example :- def yield_check
		    puts "outside block 1"
		    yield
		    puts "outside block 2"
		    yield							      # calling block using yield keyword
		   end

		   yield_check {puts "block code check using yield statement"}     #block


	output :-  outside block 1
		   block code check using yield statement
		   outside block 2
		   block code check using yield statement
		   
		   
 	a). pass parameters with the yield statement.
 		
 		def yield_check
		    puts "outside block 1"
		    yield 10,9                                                  # calling block using yield keyword with parameter
		    puts "outside block 2"
		    yield 3,8                                               # calling block using yield keyword with parameter
		end

		yield_check {|a,b| puts "block code check using yield statement #{a} #{b}"} #block

	output :- 
		outside block 1
		block code check using yield statement 10 9
		outside block 2
		block code check using yield statement 3 8

	b). block as parameter using '&block'.
	
		def test(&block)
		   block.call         #calling block 
		end
		test { puts "Hello World!"}   #block
		
	c). begin and end block.
	
------------------------------------------------------------------------------------------------------------------------------------
								MODULES
								
 -> Modules are a way of grouping together methods, classes, and constants. Modules give you two major benefits.
	1). Modules provide a namespace and prevent name clashes.
	2). Modules implement the mixin facility.
	
	Syntax :-
		module Identifier
		   statement1
		   statement2
		   ...........
		end
		
	3). Module constants are named just like class constants, with an initial uppercase letter. 
	4). The method definitions look similar, too: Module methods are defined just like class methods.
	
 -> require Statement :-
	1). The require statement is similar to the include statement of C and C++ and the import statement of Java. 
	2). If a third program wants to use any defined module, it can simply load the module files using the Ruby require statement −

	Syntax :-  require filename
	
 -> include Statement :-
	You can embed a module in a class. To embed a module in a class, you use the include statement in the class −

	Syntax :- include modulename
		
	
	eg :-
	step 1 :- make module file and module in it (module file extension is also .rb)
	
		module Module_tool
		    def hlo(name)
			puts "hlo #{name}"
		    end
		    def bye(name)
			puts "bye #{name}"
		    end
		end
		
	step 2 :- calling module feature in other file.
	
		require_relative "Module_tool.rb"   #relative is used to find module in same folder
		include Module_tool

		Module_tool.hlo('ram')	     #calling the module method .
	

	eg 2 :- for including module in class
	
	step 1 :- make module file support.rb
		
		module Week
		   FIRST_DAY = "Sunday"
		   def Week.weeks_in_month
		      puts "You have four weeks in a month"
		   end
		   def Week.weeks_in_year
		      puts "You have 52 weeks in a year"
		   end
		end
		
	step 2 :- calling module in class 
	
		$LOAD_PATH << '.'         #Ruby aware that included files must be searched in the current directory
		require "support"

		class Decade
		include Week
		   no_of_yrs = 10
		   def no_of_months
		      puts Week::FIRST_DAY
		      number = 10*12
		      puts number
		   end
		end
		d1 = Decade.new
		puts Week::FIRST_DAY
		Week.weeks_in_month
		Week.weeks_in_year
		d1.no_of_months
		
 -> MIXINS :-
 	1). eliminate the need for multiple inheritance.
 	2). Mixins give you a wonderfully controlled way of adding functionality to classes.
 	
 	eg :- 
 		module A
		    def a1
			puts "module A method a1"
		    end
		    def a2
			puts "module A method a2"
		    end
		 end
		 module B
		    def b1
			puts "module B method b1"
		    end
		    def b2
			puts "module B method b2"
		    end
		 end
		 
		 class Sample
		 include A
		 include B
		    def s1
			puts "class method call."
		    end
		 end
		 
		 samp = Sample.new
		 samp.a1
		 samp.a2
		 samp.b1
		 samp.b2
		 samp.s1

------------------------------------------------------------------------------------------------------------------------------------
								ARRAYS
								
 -> Ruby arrays are ordered, integer-indexed collections of any object. 
 -> Each element in an array is associated with and referred to by an index.
 -> Array indexing starts at 0.
 -> an index of -1 indicates the last element of the array and so on.
 -> Ruby arrays can hold objects such as String, Integer, Fixnum, Hash, Symbol, even other Array objects. 
 -> Ruby arrays grow automatically while adding elements to them.

	1). Creating Arrays using new keyword:-
		syntax :- names = Array.new

	2). Setting size of array :-
		syntax :- names = Array.new(20)

	3). assign a value to the array as follows :-

		eg :- names = Array.new(4, "mac")
		      puts "#{names}"

		output :- ["mac", "mac", "mac", "mac"]	
		
	4). use a block with new, populating each element with what the block evaluates to :-

		eg :- nums = Array.new(10) { |e| e = e * 2 }
		      puts "#{nums}"

		output :- [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]	

	5). Other ways of array creation :-
	
		eg :- nums = Array.[](1, 2, 3, 4,5)
		      nums = Array[1, 2, 3, 4,5]
		      
	6). Using range :-
		
		eg :- digits = Array(0..9)
			puts "#{digits}"

		output :- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

	7). Built-in Methods :-
	
		a). digit.at(6)    #show digit at 6th index.
		b). arr.size       #provide size of array (count,length are similar to size)
		c). arr.pop        #remove last element from array
		d). arr.push       #add last element in array
		e). arr.shift      #add at begining
		f). arr.unshift    #remove at begining
		g). arr.sort       #sort in ascending order
		h). arr.reverse
		i). arr.include ? parameter  
		j). arr.flatten    #convert inner array into elements
		k). arr.compact    #remove null or nil values.
		l). arr.product    #convert each element in array.

--------------------------------------------------------------------------------------------------------------------------------------
							         STRINGS

 -> A String object in Ruby holds and manipulates an arbitrary sequence of one or more bytes.
 -> typically representing characters that represent human language.
 
 	eg :- 'This is a simple Ruby string literal'
 	
 -> If you need to place an apostrophe within a single-quoted string literal, precede it with a backslash.
 
        eg :- 'Won\'t you read O\'Reilly\'s book?'

	1). Expression Substitution
		-> it is a means of embedding the value of any Ruby expression into a string using #{ and } −
		
		eg:-
			x, y, z = 12, 36, 72
			puts "The value of x is #{ x }."
			puts "The sum of x and y is #{ x + y }."
			puts "The average was #{ (x + y + z)/3 }."
			
		output :- The value of x is 12.
			  The sum of x and y is 48.
			  The average was 40.
			  
	2). General Delimited Strings
		-> you can create strings inside a pair of matching though arbitrary delimiter characters, e.g., !, (, {, <, etc., preceded by a percent character (%). 
		-> Q, q, and x have special meanings. 
		-> General delimited strings can be :-

			%{Ruby is fun.}  equivalent to "Ruby is fun."
			%Q{ Ruby is fun. } equivalent to " Ruby is fun. "
			%q[Ruby is fun.]  equivalent to a single-quoted string
			%x!ls! equivalent to back tick command output `ls`
			
	3). substitute(sub) and global substitute(gsub).
	
		-> s.sub(/[aeiou]/, '*')# => "h*llo"
		-> s.gsub(/[aeiou]/, '*') # => "h*ll*"
	
	4). Hash replacement :- 
	-> If argument replacement is a hash, and pattern matches one of its keys, the replacing string is the value for that key
	
		eg :-  3.2.1 :148 > h = {'app'=>'purp' , 'le' => 'ly'}
			 => {"app"=>"purp", "le"=>"ly"} 
			3.2.1 :149 > apple.sub('app',h)
			
		output :-
			3.2.1 :150 > 'apple'.sub('app',h)
			 => "purple" 
			3.2.1 :151 > 'apple'.sub('le',h)
			 => "apply" 
			 
	5). String Slices :-

	-> A slice of a string is a substring that is selected by certain criteria.
	-> Types of slicing
		a). string[index].
		
			eg :-  3.2.1 :166 > str
				 => "sachin" 
				3.2.1 :167 > str[0]
				 => "s" 
				3.2.1 :168 > str[3]
				 => "h" 
				3.2.1 :169 > str[-2]
 				=> "i" 


		b). string[start, length].    #between some range
		
			eg :- 	3.2.1 :170 > str[0,4]
				 => "sach" 
				3.2.1 :173 > str[2,5]
				 => "chin" 

		c). string[range].
		
			eg :-   3.2.1 :174 > str[1..4]
				 => "achi" 
				3.2.1 :175 > str[1...4]
				 => "ach" 
				3.2.1 :176 > str[2..200]
				 => "chin" 

		d). string[regexp, capture = 0].
		
		eg :-   s = 'saaaccchinn' 
			3.2.1 :195 > s[/[aeiou]/]   # find first vowel letter
			 => "a" 
			3.2.1 :196 > s[/[aeiou](.)/]   # "." for add next element after first vowel
			 => "aa" 
			3.2.1 :197 > s[/[aeiou](.)\1/]  # "\1" for add all similer letter after the first vowel but must be consecutive
			 => "aaa" 
			3.2.1 :198 > s[/[aeiou](.)\1/,0]
			 => "aaa" 
			3.2.1 :199 > s[/[aeiou](.)\1/,1] # "1" consecutive similer letter limit to 1.
			 => "a" 

		e). string[substring].   #search for substring in the string.
		
			eg :-   3.2.1 :201 > s['aa']
				 => "aa" 
				3.2.1 :202 > s['zzz']
				 => nil 
				 
	6). Methods for Creating a String :-
	
		a). ::new: Returns a new string.
		
			eg :- str = String.new("hello")

		b). ::try_convert: Returns a new string created from a given object.
			-> try to convert into string.

		 	eg :-   arr = ["h", "e", "l", "l", "o"]
				str = String.try_convert(arr)          #try to convert the array into the string and store into str.
		
			
			
			
			
			

