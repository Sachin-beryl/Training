------------------------------------------------------------------------------------------------------------------------------------
								HASHES
								
 Intro :-
 -> A Hash maps each of its unique keys to a specific value.
 -> A Hash has certain similarities to an Array, but:
 -> An Array index is always an Integer.
 -> A Hash key can be (almost) any object.
 
 Hash Data Syntax :-

 -> The older syntax for Hash data uses the “hash rocket,” =>:

	h = {:foo => 0, :bar => 1, :baz => 2}
	h # => {:foo=>0, :bar=>1, :baz=>2}

 -> Alternatively, but only for a Hash key that’s a Symbol, you can use a newer JSON-style syntax, where each bareword becomes a Symbol:

	h = {foo: 0, bar: 1, baz: 2}
	h # => {:foo=>0, :bar=>1, :baz=>2}
	
 -> You can also use a String in place of a bareword:

	h = {'foo': 0, 'bar': 1, 'baz': 2}
	h # => {:foo=>0, :bar=>1, :baz=>2}
	
 -> Hash value can be omitted, meaning that value will be fetched from the context by the name of the key:

	x = 0
	y = 100
	h = {x:, y:}
	h # => {:x=>0, :y=>100}


 1). Common Uses :-
 
	a). You can use a Hash to give names to objects:

		eg:-	3.2.1 :010 > person = {name: 'sachin', surname: 'kanojia'}
			 => {:name=>"sachin", :surname=>"kanojia"} 

	b). You can use a Hash to give names to method arguments:

		eg:-	3.2.1 :011 > def method(hash)
			3.2.1 :012 >   p hash
			3.2.1 :013 > end
		some_method({foo: 0, bar: 1, baz: 2}) # => {:foo=>0, :bar=>1, :baz=>2}
		
		Note: when the last argument in a method call is a Hash, the curly braces may be omitted:
			method(foo: 0, bar: 1, baz: 2) # => {:foo=>0, :bar=>1, :baz=>2}
		
	c). You can use a Hash to initialize an object:

		class Dev
		  attr_accessor :name, :language
		  def initialize(hash)
		    self.name = hash[:name]
		    self.language = hash[:language]
		  end
		end
		matz = Dev.new(name: 'Matz', language: 'Ruby')
		matz # => #<Dev: @name="Matz", @language="Ruby">
		
	NOTE :- attr_accessor -> use to create getter and setter method for both name and language instance variable.
			       -> can be modified and retrieve values outside of the class.
 
 2). Creating a Hash

	a). Create an empty Hash by calling method Hash.new

		3.2.1 :007 > t = Hash.new
		 => {} 
		3.2.1 :008 > t.class
		 => Hash 

	b). You can create a Hash by calling method Hash.[].

		h = Hash[]
		h # => {}
		
	      ->Create a Hash with initial entries:
		h = Hash[foo: 0, bar: 1, baz: 2]
		h # => {:foo=>0, :bar=>1, :baz=>2}

	c). You can create a Hash by using its literal form (curly braces).

		h = {}
		h # => {}
		
	      ->Create a Hash with initial entries:
		h = {foo: 0, bar: 1, baz: 2}
		h # => {:foo=>0, :bar=>1, :baz=>2} 
		
 3). Hash Value Basics
 
	a). The simplest way to retrieve a Hash value (instance method []):

		h = {foo: 0, bar: 1, baz: 2}
		h[:foo] # => 0
		
	b). The simplest way to create or update a Hash value (instance method []=):
	
		h = {foo: 0, bar: 1, baz: 2}
		h[:bat] = 3 # => 3
		h # => {:foo=>0, :bar=>1, :baz=>2, :bat=>3}
		h[:foo] = 4 # => 4
		h # => {:foo=>4, :bar=>1, :baz=>2, :bat=>3}
		
	c). The simplest way to delete a Hash entry (instance method delete):

		h = {foo: 0, bar: 1, baz: 2}
		h.delete(:bar) # => 1
		h # => {:foo=>0, :baz=>2}
		
 4). Entry Order
	-> A Hash object presents its entries in the order of their creation. This is seen in:
	-> Iterative methods such as each, each_key, each_pair, each_value.
	-> Other order-sensitive methods such as shift, keys, values.
	-> The String returned by method inspect.

	a). A new Hash has its initial ordering per the given entries:

		h = Hash[foo: 0, bar: 1]
		h # => {:foo=>0, :bar=>1}
		
	b). New entries are added at the end:

		h[:baz] = 2
		h # => {:foo=>0, :bar=>1, :baz=>2}
		
	c). Updating a value does not affect the order:

		h[:baz] = 3
		h # => {:foo=>0, :bar=>1, :baz=>3}
		
	d). But re-creating a deleted entry can affect the order:

		h.delete(:foo)
		h[:foo] = 5
		h # => {:bar=>1, :baz=>3, :foo=>5}

