---------------------------------------------------------------Hash irb-------------------------------------------------------------------

 1). Methods for Creating a Hash:-
 
	a). ::[]-> Returns a new hash populated with given objects.
		
		eg:-
		3.2.1 :005 > my_hash = Hash["a",1,"b",2]
		 => {"a"=>1, "b"=>2} 

	b). ::new-> Returns a new empty hash.
	
		eg:-
		3.2.1 :006 > my_hash = Hash.new
		 => {} 
		3.2.1 :007 > my_hash["a"] = 22
		 => 22 
		3.2.1 :008 > my_hash["b"] = 33
		 => 33 
		3.2.1 :009 > my_hash
		 => {"a"=>22, "b"=>33} 

	c). ::try_convert-> Returns a new hash created from a given object.
	
		eg:-
		3.2.1 :010 > my_hash = Hash.try_convert({"y" => 99 , "z" => 100})
		 => {"y"=>99, "z"=>100} 
		3.2.1 :012 > my_hash2 = Hash.try_convert("not a hash")
		 => nil
		 
 2). Methods for Setting Hash State:-
 
	a). compare_by_identity: Sets self to consider only identity in comparing keys.
	
		eg:-
		3.2.1 :013 > my_hash
		 => {"y"=>99, "z"=>100} 
		3.2.1 :014 > my_hash.compare_by_identity
		 => {"y"=>99, "z"=>100} 
		3.2.1 :015 > my_hash["y".dup]
		 => nil 
		3.2.1 :016 > my_hash["y"]           #object id changed for y, so it will return nil if we access y in my_hash. 
		 => nil 

	b). default=: Sets the default to a given value.
	
		eg:-
		3.2.1 :023 > my_hash = Hash.new
		 => {} 
		3.2.1 :024 > my_hash.default =0 
		 => 0 
		3.2.1 :025 > my_hash["a"]
		 => 0 

	c). default_proc=: Sets the default proc to a given proc.
	
		eg:-
		3.2.1 :026 > my_hash
		 => {} 
		3.2.1 :027 > my_hash.default_proc = proc {|hash,key| hash[key] = key.length}     #setting key length as value for the key 
		 => #<Proc:0x00007f1aa4c89900 (irb):27> 
		3.2.1 :028 > my_hash["hello"]
		 => 5 
		
	d). rehash: Rebuilds the hash table by recomputing the hash index for each key
	
		eg:-
		3.2.1 :029 > my_hash3 = {"a" => 1, "b" => 2}
		 => {"a"=>1, "b"=>2} 
		3.2.1 :030 > my_hash3.rehash      		#making hash rehashable to change the values.
		 => {"a"=>1, "b"=>2} 
		3.2.1 :031 > my_hash3["a".dup] = 3
		 => 3 
		3.2.1 :032 > my_hash3["a"]
		 => 3 
		 
 3). Methods for Querying :-
 
	a). any?: Returns whether any element satisfies a given criterion.
	
		eg:-		
		3.2.1 :035 > my_hash
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :036 > has_even_number = my_hash.any? {|k,v| v.even?}
		 => true 
		3.2.1 :037 > puts "has even value ? #{has_even_number}"
		has even value ? true
		 => nil      
		
	b). compare_by_identity?: Returns whether the hash considers only identity when comparing keys.
	
		eg:-                                                     
		3.2.1 :038 > my_hash.compare_by_identity
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :039 > puts "using identity comparison? #{my_hash.compare_by_identity?}"
		using identity comparison? true
		 => nil                                                                       

	c). empty?: Returns whether there are no entries.
	
		eg:-
		3.2.1 :040 > puts "is hash empty? #{my_hash.empty?}"
		is hash empty? false
		 => nil  

	d). eql?: Returns whether a given object is equal to self.
	
		eg:-
		3.2.1 :044 > puts "hashes equal? #{my_hash.eql?(other_hash)}"
		hashes equal? false
		 => nil                                                           
		
	e). hash: Returns the integer hash code.
	
		eg:-
		3.2.1 :045 > puts "Hash code : #{my_hash.hash}"
		Hash code : 364115739327489413
		 => nil                                                           

	f). has_value?: Returns whether a given object is a value in self.
	
		eg:-
		3.2.1 :046 > hash_value = my_hash.has_value?(2)
		 => false 
		3.2.1 :047 > hash_value = my_hash.has_value?(10)
		 => true 

	g). include?, has_key?, member?, key?: Returns whether a given object is a key in self.
	
		eg:-
		3.2.1 :054 > other_hash.has_key?("a")
		 => true 

	h). length, size: Returns the count of entries.
	
		eg:-
		3.2.1 :056 > my_hash.length
		 => 3 

	i). value?: Returns whether a given object is a value in self.
	
		eg:-
		3.2.1 :057 > my_hash.value?(1)
		 => true 
		 
 4). Methods for Comparing:-
 
	a). <: Returns whether self is a proper subset of a given object.
	
		eg:-
		3.2.1 :061 > my_hash
		 => {"hello"=>5, "a"=>1, "b"=>10, "c"=>50} 
		3.2.1 :062 > other_hash
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :063 > my_hash.<(other_hash)
		 => false 
		3.2.1 :064 > other_hash.<(my_hash)
		 => true 
		
	b). <=: Returns whether self is a subset of a given object.
	
		eg:-
		3.2.1 :065 > other_hash.<=(my_hash)
		 => true 

	c). ==: Returns whether a given object is equal to self.
	
		eg:-
		3.2.1 :066 > other_hash.==(my_hash)
		 => false 
		
	d). >: Returns whether self is a proper superset of a given object
		
		eg:-
		3.2.1 :067 > other_hash.>(my_hash)
		 => false 
		
	e). >=: Returns whether self is a proper superset of a given object.
	
		eg:-
		3.2.1 :068 > other_hash.>=(my_hash)
		 => false 
		 
 5). Methods for Fetching:-
 
	a). []: Returns the value associated with a given key.
	
		eg:-
		3.2.1 :080 > other_hash
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :081 > other_hash["b"]
		 => 10 
		
	b). assoc: Returns a 2-element array containing a given key and its value.
	
		eg:-
		3.2.1 :082 > other_hash.assoc("b")
		 => ["b", 10] 
		
	c). dig: Returns the object in nested objects that is specified by a given key and additional arguments.
	
		eg:-
		3.2.1 :083 > hash = {a: {b: {c: 100}}}
		 => {:a=>{:b=>{:c=>100}}} 
		3.2.1 :084 >  hash.dig(:a, :b, :c)
		 => 100 

	d). fetch: Returns the value for a given key.
	
		eg:-
		3.2.1 :085 > other_hash.fetch("hello")
		 => 5 
		3.2.1 :086 > other_hash.fetch("d")
		(irb):86:in `fetch': key not found: "d" (KeyError)  
		                            
		3.2.1 :087 > other_hash.fetch("d",0)       #if key not present the use default(0) value , error will not shown
		 => 0 

	e). fetch_values: Returns array containing the values associated with given keys.
	
		eg:-
		3.2.1 :093 > other_hash
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :094 > other_hash.fetch_values("a", "b")
		 => [1, 10] 
		3.2.1 :095 > other_hash.fetch_values("a", "d")
		(irb):95:in `fetch_values': key not found: "d" (KeyError)

	f). key: Returns the key for the first-found entry with a given value.
	
		eg:-
		3.2.1 :096 > other_hash.key(5)
		 => "hello" 

	g). keys: Returns an array containing all keys in self.
	
		eg:-
		3.2.1 :097 > other_hash.keys
		 => ["hello", "a", "b"] 

	h). rassoc: Returns a 2-element array consisting of the key and value of the first-found entry having a given value.
	
		eg:-
		3.2.1 :098 > other_hash["d"] = 1
		 => 1 
		3.2.1 :099 > other_hash
		 => {"hello"=>5, "a"=>1, "b"=>10, "d"=>1} 
		3.2.1 :100 > other_hash.rassoc(1)
		 => ["a", 1] 

	i). values: Returns an array containing all values in self
	
		eg:-
		3.2.1 :101 > other_hash.values
		 => [5, 1, 10, 1] 

	j). values_at: Returns an array containing values for given keys.
	
		eg:-
		3.2.1 :102 > other_hash.values_at("hello", "d")
		 => [5, 1] 



