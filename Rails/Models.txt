---------------------------------------------------------------- Models --------------------------------------------------------------

 1). Active Record Basics:-
 
 	a). What is Active Record?
 	-> Active Record is a design pattern used in the Ruby on Rails framework for working with relational databases. 
 	-> It provides an Object-Relational Mapping (ORM) layer that allows to interact with a database using objects in their Ruby code.
 	   rather than writing raw SQL queries.
 	   Using ORM, the properties and relationships of the objects in an application can be easily stored and 
 	   retrieved from a database without writing SQL statements directly and with less overall database access code.
 	   
 	-> In Rails, Active Record is implemented as a module that can be included in Ruby classes to provide database functionality.
 	
 	->  features provided by Active Record include (ORM):

		*). Querying the database using methods like where, find, and order.
		*). Defining associations between tables, such as belongs_to and has_many.
		*). Validating data before it is saved to the database.
		*). Creating and updating records with methods like create and update.
		*). Automatically generating database schemas based on the class definition.
		*). Represent inheritance hierarchies through related models.
		
	b). Convention over Configuration in Active Record:-
	-> developers can save time and effort, rather than configuring everything manually.
	-> In Active Record, Convention over Configuration means that many of the database interactions and 
	   associations are automatically inferred from the naming conventions used in the application. 
	   
	eg :- if a model class is named User, Active Record will assume that the corresponding database table is named users, and 
	      it will automatically generate SQL queries based on that assumption. 
	      Similarly, if a User model has a has_many association with an Order model, 
	      Active Record will assume that the orders table has a foreign key column named user_id.
	      
	-> When using class names composed of two or more words, the model class name should follow the Ruby conventions, 
	   using the CamelCase form, while the table name must use the snake_case form.
	   
	   eg :- Model Class - Singular with the first letter of each word capitalized (e.g., BookClub).
		 Database Table - Plural with underscores separating words (e.g., book_clubs).
		 
		 	 
		Model / Class		Table / Schema
		
		Article	->	articles
		LineItem	->	line_items
		Deer		->	deers
		Mouse		->	mice
		Person		->	people
		
	-> features to Active Record instances:
	
		*). lock_version - Adds optimistic locking to a model.
		*). type - Specifies that the model uses Single Table Inheritance.
		*). (association_name)_type - Stores the type for polymorphic associations.
		*). (table_name)_count - Used to cache the number of belonging objects on associations. 
			eg:- a comments_count column in an Article class that has many instances of Comment will cache the number of existent comments for each article.


	c). Overriding the Naming Conventions:-
	
	-> suppose you have Product ApplicationRecord and products table in database with id, name attribute.
	
	-> ApplicationRecord inherits from ActiveRecord::Base, which defines a number of helpful methods. 
	   You can use the ActiveRecord::Base.table_name= method to specify the table name that should be used:

		:-      class Product < ApplicationRecord               #alter table name
			  self.table_name = "my_products"
			end
	
	   If you do so, you will have to define manually the class name that is hosting the fixtures (my_products.yml) 
	   using the set_fixture_class method in your test definition:

		:-	class ProductTest < ActiveSupport::TestCase     
			  set_fixture_class my_products: Product
			  fixtures :my_products
			  # ...
			end
			
	   It's also possible to override the column that should be used as the table's primary key using 
	   the ActiveRecord::Base.primary_key= method:

		:-	class Product < ApplicationRecord		  #alter primary key
			  self.primary_key = "product_id"
			end
			
	
	d). CRUD: Reading and Writing Data:-
	
		1). Create
		
		-> The new method will return a new object while create will return the object and save it to the database.

		eg: the create method call will create and save a new record into the database:
			:- user = User.create(name: "David", occupation: "Code Artist")

		  : Using the new method, an object can be instantiated without being saved:

		    :-	user = User.new
			user.name = "David"
			user.occupation = "Code Artist"

		    # A call to user.save will commit the record to the database.

		-> Finally, if a block is provided, both create and new will yield the new object to that block for initialization:

		    :-	user = User.new do |u|
			  u.name = "David"
			  u.occupation = "Code Artist"
			end
			
		2). Read
		
		-> Active Record provides a rich API for accessing data within a database. 
		   Below are a few examples of different data access methods provided by Active Record.

			# return a collection with all users
			:- users = User.all
			
			# return the first user
			:- user = User.first
			
			# return the first user named David
			:- david = User.find_by(name: 'David')
			
			# find all users named David who are Code Artists and sort by created_at in reverse chronological order
			:- users = User.where(name: 'David', occupation: 'Code Artist').order(created_at: :desc)
			
		3). Update
		
		Once an Active Record object has been retrieved, its attributes can be modified and it can be saved to the database.

		   *).	user = User.find_by(name: 'David')
				user.name = 'Dave'
				user.save
			
			:A shorthand for this is to use a hash mapping attribute names to the desired value, like so:

				user = User.find_by(name: 'David')
				user.update(name: 'Dave')
	
		   *).  If, on the other hand, you'd like to update several records in bulk, 
		   	you may find the update_all class method useful:

				User.update_all "max_login_attempts = 3, must_change_password = 'true'"

			:This is the same as if you wrote:-
				User.update(:all, max_login_attempts: 3, must_change_password: true)
				
		4). Delete
		Likewise, once retrieved an Active Record object can be destroyed which removes it from the database.

		   *).	user = User.find_by(name: 'David')
			user.destroy
		
		   *). to delete several records in bulk, you may use destroy_by or destroy_all method:

			# find and delete all users named David
			User.destroy_by(name: 'David')

			# delete all users
			User.destroy_all
						

