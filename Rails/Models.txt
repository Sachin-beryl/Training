---------------------------------------------------------------- Models --------------------------------------------------------------

 1). Active Record Basics:-
 
 	a). What is Active Record?
 	-> Active Record is a design pattern used in the Ruby on Rails framework for working with relational databases. 
 	-> It provides an Object-Relational Mapping (ORM) layer that allows to interact with a database using objects in their Ruby code.
 	   rather than writing raw SQL queries.
 	   Using ORM, the properties and relationships of the objects in an application can be easily stored and 
 	   retrieved from a database without writing SQL statements directly and with less overall database access code.
 	   
 	-> In Rails, Active Record is implemented as a module that can be included in Ruby classes to provide database functionality.
 	
 	->  features provided by Active Record include (ORM):

		*). Querying the database using methods like where, find, and order.
		*). Defining associations between tables, such as belongs_to and has_many.
		*). Validating data before it is saved to the database.
		*). Creating and updating records with methods like create and update.
		*). Automatically generating database schemas based on the class definition.
		*). Represent inheritance hierarchies through related models.
		
	b). Convention over Configuration in Active Record:-
	-> developers can save time and effort, rather than configuring everything manually.
	-> In Active Record, Convention over Configuration means that many of the database interactions and 
	   associations are automatically inferred from the naming conventions used in the application. 
	   
	eg :- if a model class is named User, Active Record will assume that the corresponding database table is named users, and 
	      it will automatically generate SQL queries based on that assumption. 
	      Similarly, if a User model has a has_many association with an Order model, 
	      Active Record will assume that the orders table has a foreign key column named user_id.
	      
	-> When using class names composed of two or more words, the model class name should follow the Ruby conventions, 
	   using the CamelCase form, while the table name must use the snake_case form.
	   
	   eg :- Model Class - Singular with the first letter of each word capitalized (e.g., BookClub).
		 Database Table - Plural with underscores separating words (e.g., book_clubs).
		 
		 	 
		Model / Class		Table / Schema
		
		Article	->	articles
		LineItem	->	line_items
		Deer		->	deers
		Mouse		->	mice
		Person		->	people
		
	-> features to Active Record instances:
	
		*). lock_version - Adds optimistic locking to a model.
		*). type - Specifies that the model uses Single Table Inheritance.
		*). (association_name)_type - Stores the type for polymorphic associations.
		*). (table_name)_count - Used to cache the number of belonging objects on associations. 
			eg:- a comments_count column in an Article class that has many instances of Comment will cache the number of existent comments for each article.



	
		
		
