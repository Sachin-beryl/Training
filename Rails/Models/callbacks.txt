------------------------------------------------------------- callbacks --------------------------------------------------------------

-> Callbacks are methods that get called at certain moments of an object's life cycle. 
-> With callbacks it is possible to write code that will run whenever an Active Record object is created, saved, updated, deleted, validated, or loaded from the database.

 1). Callback Registration :-
	-> In order to use the available callbacks, you need to register them. You can implement the callbacks as ordinary methods and 
	-> use a macro-style class method to register them as callbacks
	
	:-        def normalize_name     #use for callback
		    self.name = name.downcase.titleize
		  end
		  
		  before_validation :normalize_name  #calling normalize_name method for name for validating the name.
		  
	:- The macro-style class methods can also receive a block. Consider using this style 
	   if the code inside your block is so short that it fits in a single line.
	   
		   before_validation do
		     self.name = name.downcase.titleize
		   end

 2). Available Callbacks :-
-> Here is a list with all the available Active Record callbacks, 
-> listed in the same order in which they will get called during the respective operations.

   a). Creating an Object
   
	*). before_validation :-
		def normalize_name     #use for callback
		  self.name = name.downcase.titleize
		end

		before_validation :normalize_name

	*). after_validation :-
		def print_message
		  puts "validation checked"
		end

		after_validation :print_message
		
	*). before_save :-  it work on both create and update
	
		def length_check
		  if self.mobile.split('').length != 10
		    self.mobile = "1234567890"
		  end
		end

		before_save :length_check

	*). around_save :-
		
		def around_save_check
		  puts "# perform actions before save"
		  yield # save the object
		  puts "# perform actions after save"
		end

		around_save :around_save_check
	
	*). before_create :-
	
		  def before_create_check
		    self.before_save = "before_create"
		    puts "==========================before create is created============================= "
		  end

		  before_create :before_create_check

	*). around_create :-
	
		  def around_create_check
		    self.before_save = "around_create"
		    puts "========================use around create before create happen====================="
		    yield
		    puts "========================use around create after create happen====================="
		    self.after_save = "around_create"
		  end

		  around_create :around_create_check
		  
	*). after_create :-
	
		  def after_create_check
		    puts "========================after create is created================================="
		  end

		  after_create :after_create_check
		  
	*). after_save :-
	
		  def after_save_check
		    puts "================================after save check================================"
		  end

		  after_save :after_save_check

	*). after_commit :-

		  def after_commit_check
		    puts "================================after commit check================================"
		  end

  		  after_commit :after_commit_check
  		  
  b). Updating an Object
  
	*). before_validation
	*). after_validation
	*). before_save
	*). around_save
	*). before_update
	
		  def before_update_check
		    self.before_save = "before update"
		    puts "=================print before update================================"
		  end

		  before_update :before_update_check

  
	*). after_update
	
		  #after update
		  def after_update_check
		    self.after_save = "after update"
		    puts "=====================print after update================================"
		  end
		  
		  after_update :after_update_check
		  
	*). after_save
	*). after_commit 
	
 c). Destroying an Object
 
	*). before_destroy
	
		  before_destroy :can_destroy?, prepend: true

		  def can_destroy?
		    if self.form_id > 1003 
		      self.errors.add(:base, "Can't be destroy because form id greater than 1003")
		      throw :abort
		    end
		  end
		  
	    calling :- 
		  3.2.1 :046 > f3 = form.find_by(id: 18)
			  FormDetail Load (0.5ms)  SELECT "form_details".* FROM "form_details" WHERE "form_details"."id" = $1 LIMIT $2  
			  [["id", 18], ["LIMIT", 1]]
			  =>                                                          
			  #<FormDetail:0x00007f2a14b5c1c0    
		  
		  3.2.1 :048 > f3.destroy!
			  TRANSACTION (0.2ms)  BEGIN
			  FormDetail Destroy (0.4ms)  DELETE FROM "form_details" WHERE "form_details"."id" = $1  [["id", 18]]
			  TRANSACTION (1.3ms)  COMMIT                             

		     
	*). around_destroy
	
		  around_destroy :comment_around

		  def comment_around
		    puts "comment for around destroy before"
		    yield
		    puts "comment for around destroy after"
		  end
		  
	*). after_destroy
	
		  after_destroy :comment

		  def comment
		    puts "after destroy successful"
		  end
