------------------------------------------------------ Active Record Associations -----------------------------------------------------

 -> In Rails, an association is a connection between two Active Record models.
 
 ****************************** NOTE :- using below two association, to make one to many relation. ************************************
 
 (**) before adding association :-
 
 	1). first make model and enter data for that table.
 	
 	    :- rails g model book name book_type   #if we not specify the type opf column it will take string.
 	    
 	    -> data enter in book table
 	    	:- Book.create([{name: "The Hobbit ", book_type: "Fantasy"},{name: "And Then There Were None", book_type: "Mystery"}
 	    	,{name: "The Little Prince", book_type: "Adventure"},{name: "A Tale Of Two Cities", book_type: "fiction"}])

 (**) After adding association
 
	2). Now add association :-
 	    
	    :- rails g model author name book:references    # it will automatically generate belongs_to association in author.
	    
	    -> check in app/model/author.rb
	    	:-     class Author < ApplicationRecord
			  belongs_to :book                  # belongs_to always use singular model name.
			end
		
	    -> create manual has_many association in book.rb
	   	:-	class Book < ApplicationRecord
			  has_many :authors		     # has_many always use plural model name.
			end
			
	     a). now enter the data for author table.
	     
	     	:- Author.create([{name: "JRR Tolkien", book_id: 2},{name: "Agatha Christie", book_id: 3},{name: "Antoine de Saint
	     	-ExupÃ©ry", book_id: 4},{name: "Charles Dickens", book_id: 5},{name: "Charles Dickens", book_id: 3}])


  practise on console :-
  
  	*). save book one row into variable.
  		:- b1 = Book.find(3)
  		
  	*). for check author detail related to 3rd id book. 
  		:- b1.authors
  		
  output:- showing one book have two author  (one-2-many)
  
        Author Load (0.5ms)  SELECT "authors".* FROM "authors" WHERE "authors"."book_id" = $1  [["book_id", 3]]
	=>                                                              
	[#<Author:0x00007f2c814e91c0                              
	  id: 3,                                                  
	  name: "Agatha Christie",                                
	  book_id: 3,                                             
	  created_at: Thu, 30 Mar 2023 09:03:00.249358000 UTC +00:00,
	  updated_at: Thu, 30 Mar 2023 09:03:00.249358000 UTC +00:00>,
	 #<Author:0x00007f2c814e8fe0                              
	  id: 6,                                                  
	  name: "Charles Dickens",                                
	  book_id: 3,                                             
	  created_at: Thu, 30 Mar 2023 09:03:00.262260000 UTC +00:00,
	  updated_at: Thu, 30 Mar 2023 09:03:00.262260000 UTC +00:00>] 
 
----------------------------------------------------------------------------------------------------------------------------------
 								has_one Association
 								 
 -> A has_one association indicates that one other model has a reference to this model. 
 -> That model can be fetched through this association.
 
 	*). Making publisher migration for has_one.
 	
 		:-     class CreatePublishers < ActiveRecord::Migration[7.0]
			  def change
			    create_table :publishers do |t|
			      t.string :name
			      t.references :book, null: false, foreign_key: true      #when we migarte,then automatic reference is created. 
			      t.timestamps
			    end
			  end
			end
			
	*). now manual add has_one in book to make book have one publisher.
	
		:-     class Book < ApplicationRecord
			  has_many :authors
			  has_one :publisher
			end
			
		:-     class Publisher < ApplicationRecord
			  belongs_to :book
			end
			
 practise on console :-
 
 	3.2.1 :006 > b1 = Book.first
                   
        output :-
                                        
	   3.2.1 :007 > b1.publisher
	   
			  Publisher Load (0.3ms)  SELECT "publishers".* FROM "publishers" WHERE "publishers"."book_id" = $1 LIMIT $2  
			  [["book_id", 1], ["LIMIT", 1]]
			 =>                                                              
			#<Publisher:0x00007fa824e17818                                   
			 id: 1,                                                          
			 name: "Arihant Books",                                          
			 book_id: 1,                                                     
			 created_at: Thu, 30 Mar 2023 10:22:22.746515000 UTC +00:00,     
			 updated_at: Thu, 30 Mar 2023 10:22:22.746515000 UTC +00:00>     

-----------------------------------------------------------------------------------------------------------------------------------
							has_many :through Association
							
 -> A has_many :through association is often used to set up a many-to-many connection with another model. 
 -> This association indicates that the declaring model can be matched with zero or more instances of 
    another model by proceeding through a third model.
			
 	*). for has_many :through we make two model, first = category and second = book_category (this is used for through as common)
 	
 		-> category model
 		 	:- rails g model category name
 		 	
 	        -> book_category model reference with book and category model.
 			:- rails g model book_category book:references category:references
 			
	 		after migration:-	class CreateBookCategories < ActiveRecord::Migration[7.0]
						  def change
						    create_table :book_categories do |t|
						      t.references :book, null: false, foreign_key: true
						      t.references :category, null: false, foreign_key: true
						      t.timestamps
						    end
						  end
						end
						
practise on console :-
  
  a) call many category related to one book.
  
  	3.2.1 :024 > b2.categories
 
	output:-
	
	  id: 2,
	  name: "Contemporary",
	  created_at: Thu, 30 Mar 2023 11:39:51.851053000 UTC +00:00,
	  updated_at: Thu, 30 Mar 2023 11:39:51.851053000 UTC +00:00>,
	 #<Category:0x00007fa8242eb548
	  id: 6,
	  name: "Mystery",
	  created_at: Thu, 30 Mar 2023 11:39:51.864012000 UTC +00:00,
	  updated_at: Thu, 30 Mar 2023 11:39:51.864012000 UTC +00:00>] 
	  
	  
   b) call many book related to one category.
   
	3.2.1 :025 > cate = Category.find(5)
	3.2.1 :026 > cate.books
	  
	output:- 
                                          
	  id: 4,                                                               
	  name: "The Little Prince",                                           
	  book_type: "Adventure",                                              
	  created_at: Thu, 30 Mar 2023 08:54:11.350053000 UTC +00:00,          
	  updated_at: Thu, 30 Mar 2023 08:54:11.350053000 UTC +00:00>,         
	 #<Book:0x00007fa824336a48                                             
	  id: 5,                                                          
	  name: "A Tale Of Two Cities",                                   
	  book_type: "fiction",                                           
	  created_at: Thu, 30 Mar 2023 08:54:11.352993000 UTC +00:00,     
	  updated_at: Thu, 30 Mar 2023 08:54:11.352993000 UTC +00:00>]    

------------------------------------------------------------------------------------------------------------------------------------
							has_one :through Association
							
-> A has_one :through association sets up a one-to-one connection with another model. 
-> This association indicates that the declaring model can be matched with one instance of another model by proceeding through a third model.

-> for has_one :through association we will make book record model and record model.

	:- Record model association.
	   
	       class Record < ApplicationRecord
		  belongs_to :book_record
		end

	:- Book model association.
	
	  	has_one :book_record
  		has_one :record, through: :book_record
  		
  	:- BookRecord model association.
  	
  		class BookRecord < ApplicationRecord
		  belongs_to :book
		  has_one :record
		end
		
		
practise on console :-

	3.2.1 :015 > book = Book.find(2)
	3.2.1 :017 > book.record

	output :-                                      
	 id: 1,                                                           
	 borrowed: true,                                                  
	 book_record_id: 2,                                               
	 created_at: Thu, 30 Mar 2023 13:31:35.263745000 UTC +00:00,      
	 updated_at: Thu, 30 Mar 2023 13:31:35.263745000 UTC +00:00>      

-----------------------------------------------------------------------------------------------------------------------------------
						  has_and_belongs_to_many Association
						  
-> A has_and_belongs_to_many association creates a direct many-to-many connection with another model, with no intervening model. 
-> This association indicates that each instance of the declaring model refers to zero or more instances of another model.

	:- Borrower model
	
		class Borrower < ApplicationRecord
		  has_and_belongs_to_many :books
		end
		
	:- Book model
	
		class Book < ApplicationRecord
		  has_and_belongs_to_many :borrowers
		end
		
	:- create join table of borrower and book
	
		class CreateJoinTableBooksBorrowers < ActiveRecord::Migration[7.0]
		  def change
		    create_join_table :books, :borrowers
		  end
		end
		
practise on console :-

NOTE :- we have to enter data like below because we haven,t create a model to store data, we only made a table(books_borrowers).
	which don,t have its own id, it only store ids of book and borrower model. when we create data ike below.
	
	-> books_borrowers is not a model so we can,t enter data as we do with models.(main reason)
	
	3.2.1 :041 > b1.books << Book.where(id:2)      #enter book detail in borrower
	3.2.1 :042 > b1.books
	
	output:-                                            
	  id: 2,                                                                
	  name: "The Hobbit ",                                                  
	  book_type: "Fantasy",                                                 
	  created_at: Thu, 30 Mar 2023 08:54:11.342365000 UTC +00:00,           
	  updated_at: Thu, 30 Mar 2023 08:54:11.342365000 UTC +00:00>]   
