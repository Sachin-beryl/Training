----------------------------------------------------------food ordering-----------------------------------------------------------------

 1). Database creation :-
 	 CREATE DATABASE food_ordering
 	 
 2). menu_items table created :-
 
 	 CREATE TABLE menu_items (
	  id BIGSERIAL PRIMARY KEY,
	  restaurant_id integer,
	  menu_category_id integer,
	  name varchar(50),
	  price integer,
	  Description varchar(100),
	  veg boolean
	);
	
 3). customers table creation :- 
 
 	CREATE TABLE customers (
	  id BIGSERIAL PRIMARY KEY,
	  First_name varchar(20),
	  Last_name varchar(20),
	  Email varchar(100),
	  Phone varchar,
	  Username varchar(50),
	  Password varchar(50),
	  Address_id integer,
	  dob Date,
	  Created_at timestamptz,
	  gender varchar
	);
	
 4). orders table creation :-
 
 	CREATE TABLE orders (
	  id BIGSERIAL PRIMARY KEY,
	  Customer_id integer,
	  restaurant_id integer,
	  customer_address_id integer,
	  amount integer,
	  Created_at timestamp,
	  status_id integer,
	  rider_id integer
	);
	
 5). order_details table creation :-
 
 	CREATE TABLE order_details (
	  id BIGSERIAL PRIMARY KEY,
	  Order_id integer,
	  menu_item_id integer,
	  quantity integer,
	  item_price integer,
	  total_price integer
	);
	
 6). payments table creation :-
 
 	CREATE TABLE payments (
	  id BIGSERIAL PRIMARY KEY,
	  Order_id integer,
	  date Date
	);
	
 7). ratings table creation :-
 
 	CREATE TYPE score AS ENUM (          #user define data type for scale attribute
	  '1',
	  '2',
	  '3',
	  '4',
	  '5'
	);
	
	
	CREATE TABLE ratings (               #rating table 
	  id BIGSERIAL PRIMARY KEY,
	  Scale score,
	  comment varchar(200),
	  rating_for_id integer,
	  date Date,
	  Customer_id integer
	);

 8). cart_items table creation :-
 
 	CREATE TABLE cart_items (
	  id BIGSERIAL PRIMARY KEY,
	  Customer_id integer,
	  menu_item_id integer,
	  Created_at Date,
	  Updated_at Date
	);
	
 9). checkout_details table creation :-
 
 	CREATE TABLE checkout_details (
	  id BIGSERIAL PRIMARY KEY,
	  Order_id integer,
	  Check_at date,
	  customer_address_id integer,
	  Delivery_charge integer
	);
	
 10). status table creation :-
 
	 CREATE TABLE status (
	  id BIGSERIAL PRIMARY KEY,
	  name varchar
	);
		
 11). restaurants table creation :-
 
 	CREATE TABLE restaurants (
	  id BIGSERIAL PRIMARY KEY,
	  name varchar(50),
	  veg boolean,
	  restaurant_categories_id integer,
	  address varchar(100),
	  contact_person varchar,
	  contact_person_number varchar,
	  open_time timestamp,
	  close_time timestamp,
	  rating_for_id integer
	);
	
 12). menu_categories table creation :-
 
 	CREATE TABLE menu_categories (
	  id integer PRIMARY KEY,
	  name varchar(100)
	);
	
 13). customer_address table creation :-
 
 	CREATE TABLE customer_address (
	  id integer PRIMARY KEY,
	  name varchar,
	  house_no integer,
	  street_no integer,
	  locality varchar,
	  city varchar,
	  zip_code varchar,
	  land_mark varchar
	);
	
 14). rating_for table creation :-
 
 	CREATE TABLE rating_for (
	  id integer PRIMARY KEY,
	  name varchar
	);
	
 15). riders table creation :-
 
 	CREATE TABLE riders (
	  id integer PRIMARY KEY,
	  name varchar,
	  gender varchar,
	  dob varchar,
	  Aadhar_card_number varchar,
	  Driving_license_number varchar,
	  vehicle_id integer
	);
	
 16). vehicles table creation :-
 
 	CREATE TABLE vehicles (
	  id integer PRIMARY KEY,
	  name varchar,
	  brand_name varchar,
	  registration_number integer,
	  purchase_date Date,
	  RC varchar,
	  insurance_certificate_number varchar,
	  pollution_certificate_number varchar
	);
	
 17). restaurant_categories table creation :-
 
 	CREATE TABLE restaurant_categories (
	  id integer PRIMARY KEY,
	  name varchar
	);
	
	
 18). Making foreign keys :-
 
 	a). ALTER TABLE "menu_items" ADD FOREIGN KEY ("menu_category_id") REFERENCES "menu_categories" ("id");
 	b). ALTER TABLE "orders" ADD FOREIGN KEY ("status_id") REFERENCES "status" ("id");
	c). ALTER TABLE "order_details" ADD FOREIGN KEY ("order_id") REFERENCES "orders" ("id");
	d). ALTER TABLE "payments" ADD FOREIGN KEY ("order_id") REFERENCES "orders" ("id");
	e). ALTER TABLE "ratings" ADD FOREIGN KEY ("customer_id") REFERENCES "customers" ("id");
	f). ALTER TABLE "cart_items" ADD FOREIGN KEY ("customer_id") REFERENCES "customers" ("id");
	g). ALTER TABLE "cart_items" ADD FOREIGN KEY ("menu_item_id") REFERENCES "menu_items" ("id");
	h). ALTER TABLE "checkout_details" ADD FOREIGN KEY ("order_id") REFERENCES "orders" ("id");
	i). ALTER TABLE "checkout_details" ADD FOREIGN KEY ("customer_address_id") REFERENCES "customer_address" ("id");
	j). ALTER TABLE "restaurants" ADD FOREIGN KEY ("rating_for_id") REFERENCES "rating_for" ("id");
	k). ALTER TABLE "riders" ADD FOREIGN KEY ("vehicle_id") REFERENCES "vehicles" ("id");
	l). ALTER TABLE "orders" ADD FOREIGN KEY ("restaurant_id") REFERENCES "restaurants" ("id");
	m). ALTER TABLE "orders" ADD FOREIGN KEY ("customer_address_id") REFERENCES "customer_address" ("id");
	n). ALTER TABLE "orders" ADD FOREIGN KEY ("rider_id") REFERENCES "riders" ("id");
	o). ALTER TABLE "order_details" ADD FOREIGN KEY ("menu_item_id") REFERENCES "menu_items" ("id");
	p). ALTER TABLE "ratings" ADD FOREIGN KEY ("rating_for_id") REFERENCES "rating_for" ("id");
	q). ALTER TABLE "restaurants" ADD FOREIGN KEY ("restaurant_categories_id") REFERENCES "restaurant_categories" ("id");




	
